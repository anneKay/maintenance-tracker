{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple API that lets you create a maintenance request, track and monitor the requests",
    "version": "2",
    "title": "Maintenance Tracker"
   
  },
  "host": "mtracker-nwanna.herokuapp.com",
  "basePath": "/api/v2",
  "tags": [
    {
      "name": "request",
      "description": "Everything about your requests"
    },
    
    {
      "name": "user",
      "description": " Everything about user signup and login"
    },
  
    {
      "name": "admin",
      "description": "Everything about admin actions"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/users/requests": {
      "post": {
        "tags": [
          "request"
        ],
        "summary": "Add a new request",
        "description": "",
        "operationId": "addRequest",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "request that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized user"
          },
          "200": {
            "description": "request ok"
          },
          "201": {
            "description": "request successfully created"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "request"
        ],
        "summary": "get all requests by a user",
        "description": "",
        "operationId": "getRequests",
       
        "produces": [
          "application/xml",
          "application/json"
        ],
        
        "responses": {
          "401": {
            "description": "unauthorized user"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "users/requests/{requestId}/delete": {
      "delete": {
      "tags": [
        "request"
      ],
      "summary": "Delete a request",
      "description": "Include the id of the request to be deleted in path",
      "operationId": "deleteRequest",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "name": "requestId",
          "in": "path",
          "description": "ID of the request that needs to be deleted",
          "required": true,
          "type": "integer",
          "minimum": 1,
          "format": "int64"
          
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "request not found"
        }
      },
      "security": [
        {
          "api_key": []
        }
      ]
    } 
    },
  
    "/users/requests/{requestId}": {
      "get": {
        "tags": [
          "request"
        ],
        "summary": "Find request by id",
        "description": "",
        "operationId": "getRequestById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "Id values that needs to be considered for filter",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Request"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "request"
        ],
        "summary": "Modify a request",
        "description": "prodviding the id of the request will allow for midification under certain conditions",
        "operationId": "modifyRequestById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "Id to filter by",
            "required": true,
            "type": "integer",
            "items": {
              "type": "string"
              
            },
           
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "description": "request object that needs to be modified",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Request"
              }
            }
          },
          "400": {
            "description": "Invalid request value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    
    "/requests": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Find all requests",
        "description": "Returns all requests made by all users",
        "operationId": "getAllRequests",
        "produces": [
          "application/xml",
          "application/json"
        ],
        
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/request"
            }
          },
          
          "404": {
            "description": "request not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
     
    },
    "/requests/{requestId}/approve": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Approve a single request",
        "description": "add the id of a request to approve only a pending request",
        "operationId": "approveRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of request to approve",
            "required": true,
            "type": "integer"
            
          }
        
        ],
        "responses": {
          "200": {
            "description": "request successfully approved",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "conflict, you can only approve a pending request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/requests/{requestId}/disapprove": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Disapprove a request ",
        "description": "Updates the status of a request as disapproved",
        "operationId": "disapproveRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of request to approve",
            "required": true,
            "type": "integer"
            
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer"
  
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/requests/{requestId}/resolve": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Resolve a request",
        "description": "Change the status of a request to completed",
        "operationId": "resolveRequest",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of request to approve",
            "required": true,
            "type": "integer"
            
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "409": {
            "description": "conflict, you can only resolve an approved request"
          }
        },
        "security": [
        {
          "api_key": []
        }
      ]
      }
    },
    "/requests/{requestId}/delete": {
      "delete": {
      "tags": [
        "admin"
      ],
      "summary": "Delete a request",
      "description": "Include the id of the request to be deleted in path",
      "operationId": "deleteByAdmin",
      "produces": [
        "application/xml",
        "application/json"
      ],
      "parameters": [
        {
          "name": "requestId",
          "in": "path",
          "description": "ID of the request that needs to be deleted",
          "required": true,
          "type": "integer",
          "minimum": 1,
          "format": "int64"
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "request not found"
        }
      },
      "security": [
        {
          "api_key": ""
        }
      ]
    } 
    },
  
    "/requests/{requestId}/reset": {
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Reset the status of a request",
        "description": "Only do this for requests without the status of pending",
        "operationId": "resetRequest",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of request that needs to be reset",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "request successfully reset",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "409": {
            "description": "conflict, cannot resolve reset a pending request"
          },
          "404": {
            "description": "request not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
      
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "Create a new user account",
        "operationId": "signupUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    
    "/auth/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Login a user",
        "description": "provide the authentication key in header",
        "operationId": "loginUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user object that needs to be verified",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "api_key": {
                "type": "string",
                "description": "unique user token"
              }
            }
          },
          "401": {
            "description": "unauthorized, provided invalid email or password"
          }
        }
      }
    }
  
  },
  "securityDefinitions": {
    
    "api_key": {
      "type": "apiKey",
      "name": "authentication",
      "in": "header"
    }
  },
  "definitions": {
    
    "User": {
      "type": "object",
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
       
        "name": {
          "type": "string"
        },
    
        "email": {
          "type": "string"
        },
       
        "password": {
          "type": "string"
        }
       
      },
      "xml": {
        "name": "User"
      }
    },
   
    "Request": {
      "type": "object",
      "required": [
        "title",
        "description",
        "requesttype"
      ],
      "properties": {
      
        "title": {
          "type": "string",
          "example": "Dishwasher"
        },
        "description": {
          "type": "string",
          "example": "Dishwasher has clog in it"
        },
        "requestType": {
          "type": "string",
          "example": "urgent"
        }
      
      },
      "xml": {
        "name": "Request"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "requesttype": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Maintenance Tracker",
    "url": "https://mtracker-nwanna.herokuapp.com"
  }
}