// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` Login Form component rendering Should render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateForm
    onChange={[Function]}
    onSubmit={[Function]}
    state={
      Object {
        "data": Object {
          "description": "",
          "title": "",
        },
        "errors": Object {},
        "loading": false,
        "requestType": "",
      }
    }
    validate={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <main>
        <Form
          as="form"
          onSubmit={[Function]}
        >
          <FormField
            error={false}
          >
            <label
              htmlFor="title"
            >
              Title:
              <input
                id="title"
                name="title"
                onChange={[Function]}
                placeholder="Enter your request title"
                required={true}
                type="text"
                value=""
              />
            </label>
          </FormField>
          <FormField
            error={false}
          >
            <label
              htmlFor="requestType"
            >
              Request Type
            </label>
            <Dropdown
              additionLabel="Add "
              additionPosition="top"
              closeOnBlur={true}
              deburr={false}
              fluid={true}
              icon="dropdown"
              minCharacters={1}
              noResultsMessage="No results found."
              onChange={[Function]}
              openOnFocus={true}
              options={
                Array [
                  Object {
                    "key": "urgent",
                    "text": "urgent",
                    "value": "urgent",
                  },
                  Object {
                    "key": "normal",
                    "text": "normal",
                    "value": "normal",
                  },
                  Object {
                    "key": "nonurgent",
                    "text": "Not urgent",
                    "value": "nonurgent",
                  },
                ]
              }
              placeholder="select request type"
              renderLabel={[Function]}
              search={true}
              searchInput="text"
              selectOnBlur={true}
              selectOnNavigation={true}
              selection={true}
              wrapSelection={true}
            />
          </FormField>
          <FormField
            error={false}
          >
            <label
              htmlFor="decription"
            >
              Description
            </label>
            <textarea
              cols={50}
              id="description"
              name="description"
              onChange={[Function]}
              placeholder="Describe your request"
              required={true}
              rows={4}
              type="text"
            />
          </FormField>
          <input
            type="submit"
            value="Submit"
          />
          <Link
            replace={false}
            to="/profile"
          >
            <input
              id="cancel"
              value="Cancel"
            />
          </Link>
        </Form>
      </main>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Form
          as="form"
          onSubmit={[Function]}
        >
          <FormField
            error={false}
          >
            <label
              htmlFor="title"
            >
              Title:
              <input
                id="title"
                name="title"
                onChange={[Function]}
                placeholder="Enter your request title"
                required={true}
                type="text"
                value=""
              />
            </label>
          </FormField>
          <FormField
            error={false}
          >
            <label
              htmlFor="requestType"
            >
              Request Type
            </label>
            <Dropdown
              additionLabel="Add "
              additionPosition="top"
              closeOnBlur={true}
              deburr={false}
              fluid={true}
              icon="dropdown"
              minCharacters={1}
              noResultsMessage="No results found."
              onChange={[Function]}
              openOnFocus={true}
              options={
                Array [
                  Object {
                    "key": "urgent",
                    "text": "urgent",
                    "value": "urgent",
                  },
                  Object {
                    "key": "normal",
                    "text": "normal",
                    "value": "normal",
                  },
                  Object {
                    "key": "nonurgent",
                    "text": "Not urgent",
                    "value": "nonurgent",
                  },
                ]
              }
              placeholder="select request type"
              renderLabel={[Function]}
              search={true}
              searchInput="text"
              selectOnBlur={true}
              selectOnNavigation={true}
              selection={true}
              wrapSelection={true}
            />
          </FormField>
          <FormField
            error={false}
          >
            <label
              htmlFor="decription"
            >
              Description
            </label>
            <textarea
              cols={50}
              id="description"
              name="description"
              onChange={[Function]}
              placeholder="Describe your request"
              required={true}
              rows={4}
              type="text"
            />
          </FormField>
          <input
            type="submit"
            value="Submit"
          />
          <Link
            replace={false}
            to="/profile"
          >
            <input
              id="cancel"
              value="Cancel"
            />
          </Link>
        </Form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "form",
          "children": Array [
            <FormField
              error={false}
            >
              <label
                htmlFor="title"
              >
                Title:
                <input
                  id="title"
                  name="title"
                  onChange={[Function]}
                  placeholder="Enter your request title"
                  required={true}
                  type="text"
                  value=""
                />
              </label>
            </FormField>,
            <FormField
              error={false}
            >
              <label
                htmlFor="requestType"
              >
                Request Type
              </label>
              <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                fluid={true}
                icon="dropdown"
                minCharacters={1}
                noResultsMessage="No results found."
                onChange={[Function]}
                openOnFocus={true}
                options={
                  Array [
                    Object {
                      "key": "urgent",
                      "text": "urgent",
                      "value": "urgent",
                    },
                    Object {
                      "key": "normal",
                      "text": "normal",
                      "value": "normal",
                    },
                    Object {
                      "key": "nonurgent",
                      "text": "Not urgent",
                      "value": "nonurgent",
                    },
                  ]
                }
                placeholder="select request type"
                renderLabel={[Function]}
                search={true}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                selection={true}
                wrapSelection={true}
              />
            </FormField>,
            <FormField
              error={false}
            >
              <label
                htmlFor="decription"
              >
                Description
              </label>
              <textarea
                cols={50}
                id="description"
                name="description"
                onChange={[Function]}
                placeholder="Describe your request"
                required={true}
                rows={4}
                type="text"
              />
            </FormField>,
            <input
              type="submit"
              value="Submit"
            />,
            <Link
              replace={false}
              to="/profile"
            >
              <input
                id="cancel"
                value="Cancel"
              />
            </Link>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="title"
                >
                  Title:
                  <input
                    id="title"
                    name="title"
                    onChange={[Function]}
                    placeholder="Enter your request title"
                    required={true}
                    type="text"
                    value=""
                  />
                </label>,
                undefined,
              ],
              "error": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Title:",
                    <input
                      id="title"
                      name="title"
                      onChange={[Function]}
                      placeholder="Enter your request title"
                      required={true}
                      type="text"
                      value=""
                    />,
                  ],
                  "htmlFor": "title",
                },
                "ref": null,
                "rendered": Array [
                  "Title:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "defaultValue": undefined,
                      "id": "title",
                      "name": "title",
                      "onChange": [Function],
                      "placeholder": "Enter your request title",
                      "required": true,
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              undefined,
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="requestType"
                >
                  Request Type
                </label>,
                <Dropdown
                  additionLabel="Add "
                  additionPosition="top"
                  closeOnBlur={true}
                  deburr={false}
                  fluid={true}
                  icon="dropdown"
                  minCharacters={1}
                  noResultsMessage="No results found."
                  onChange={[Function]}
                  openOnFocus={true}
                  options={
                    Array [
                      Object {
                        "key": "urgent",
                        "text": "urgent",
                        "value": "urgent",
                      },
                      Object {
                        "key": "normal",
                        "text": "normal",
                        "value": "normal",
                      },
                      Object {
                        "key": "nonurgent",
                        "text": "Not urgent",
                        "value": "nonurgent",
                      },
                    ]
                  }
                  placeholder="select request type"
                  renderLabel={[Function]}
                  search={true}
                  searchInput="text"
                  selectOnBlur={true}
                  selectOnNavigation={true}
                  selection={true}
                  wrapSelection={true}
                />,
                undefined,
              ],
              "error": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Request Type",
                  "htmlFor": "requestType",
                },
                "ref": null,
                "rendered": "Request Type",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "additionLabel": "Add ",
                  "additionPosition": "top",
                  "closeOnBlur": true,
                  "deburr": false,
                  "fluid": true,
                  "icon": "dropdown",
                  "minCharacters": 1,
                  "noResultsMessage": "No results found.",
                  "onChange": [Function],
                  "openOnFocus": true,
                  "options": Array [
                    Object {
                      "key": "urgent",
                      "text": "urgent",
                      "value": "urgent",
                    },
                    Object {
                      "key": "normal",
                      "text": "normal",
                      "value": "normal",
                    },
                    Object {
                      "key": "nonurgent",
                      "text": "Not urgent",
                      "value": "nonurgent",
                    },
                  ],
                  "placeholder": "select request type",
                  "renderLabel": [Function],
                  "search": true,
                  "searchInput": "text",
                  "selectOnBlur": true,
                  "selectOnNavigation": true,
                  "selection": true,
                  "wrapSelection": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              undefined,
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="decription"
                >
                  Description
                </label>,
                <textarea
                  cols={50}
                  id="description"
                  name="description"
                  onChange={[Function]}
                  placeholder="Describe your request"
                  required={true}
                  rows={4}
                  type="text"
                />,
                undefined,
              ],
              "error": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Description",
                  "htmlFor": "decription",
                },
                "ref": null,
                "rendered": "Description",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": null,
                  "cols": 50,
                  "id": "description",
                  "name": "description",
                  "onChange": [Function],
                  "placeholder": "Describe your request",
                  "required": true,
                  "rows": 4,
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": "textarea",
              },
              undefined,
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "type": "submit",
              "value": "Submit",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <input
                id="cancel"
                value="Cancel"
              />,
              "replace": false,
              "to": "/profile",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "cancel",
                "value": "Cancel",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "main",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <main>
          <Form
            as="form"
            onSubmit={[Function]}
          >
            <FormField
              error={false}
            >
              <label
                htmlFor="title"
              >
                Title:
                <input
                  id="title"
                  name="title"
                  onChange={[Function]}
                  placeholder="Enter your request title"
                  required={true}
                  type="text"
                  value=""
                />
              </label>
            </FormField>
            <FormField
              error={false}
            >
              <label
                htmlFor="requestType"
              >
                Request Type
              </label>
              <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                fluid={true}
                icon="dropdown"
                minCharacters={1}
                noResultsMessage="No results found."
                onChange={[Function]}
                openOnFocus={true}
                options={
                  Array [
                    Object {
                      "key": "urgent",
                      "text": "urgent",
                      "value": "urgent",
                    },
                    Object {
                      "key": "normal",
                      "text": "normal",
                      "value": "normal",
                    },
                    Object {
                      "key": "nonurgent",
                      "text": "Not urgent",
                      "value": "nonurgent",
                    },
                  ]
                }
                placeholder="select request type"
                renderLabel={[Function]}
                search={true}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                selection={true}
                wrapSelection={true}
              />
            </FormField>
            <FormField
              error={false}
            >
              <label
                htmlFor="decription"
              >
                Description
              </label>
              <textarea
                cols={50}
                id="description"
                name="description"
                onChange={[Function]}
                placeholder="Describe your request"
                required={true}
                rows={4}
                type="text"
              />
            </FormField>
            <input
              type="submit"
              value="Submit"
            />
            <Link
              replace={false}
              to="/profile"
            >
              <input
                id="cancel"
                value="Cancel"
              />
            </Link>
          </Form>
        </main>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Form
            as="form"
            onSubmit={[Function]}
          >
            <FormField
              error={false}
            >
              <label
                htmlFor="title"
              >
                Title:
                <input
                  id="title"
                  name="title"
                  onChange={[Function]}
                  placeholder="Enter your request title"
                  required={true}
                  type="text"
                  value=""
                />
              </label>
            </FormField>
            <FormField
              error={false}
            >
              <label
                htmlFor="requestType"
              >
                Request Type
              </label>
              <Dropdown
                additionLabel="Add "
                additionPosition="top"
                closeOnBlur={true}
                deburr={false}
                fluid={true}
                icon="dropdown"
                minCharacters={1}
                noResultsMessage="No results found."
                onChange={[Function]}
                openOnFocus={true}
                options={
                  Array [
                    Object {
                      "key": "urgent",
                      "text": "urgent",
                      "value": "urgent",
                    },
                    Object {
                      "key": "normal",
                      "text": "normal",
                      "value": "normal",
                    },
                    Object {
                      "key": "nonurgent",
                      "text": "Not urgent",
                      "value": "nonurgent",
                    },
                  ]
                }
                placeholder="select request type"
                renderLabel={[Function]}
                search={true}
                searchInput="text"
                selectOnBlur={true}
                selectOnNavigation={true}
                selection={true}
                wrapSelection={true}
              />
            </FormField>
            <FormField
              error={false}
            >
              <label
                htmlFor="decription"
              >
                Description
              </label>
              <textarea
                cols={50}
                id="description"
                name="description"
                onChange={[Function]}
                placeholder="Describe your request"
                required={true}
                rows={4}
                type="text"
              />
            </FormField>
            <input
              type="submit"
              value="Submit"
            />
            <Link
              replace={false}
              to="/profile"
            >
              <input
                id="cancel"
                value="Cancel"
              />
            </Link>
          </Form>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "form",
            "children": Array [
              <FormField
                error={false}
              >
                <label
                  htmlFor="title"
                >
                  Title:
                  <input
                    id="title"
                    name="title"
                    onChange={[Function]}
                    placeholder="Enter your request title"
                    required={true}
                    type="text"
                    value=""
                  />
                </label>
              </FormField>,
              <FormField
                error={false}
              >
                <label
                  htmlFor="requestType"
                >
                  Request Type
                </label>
                <Dropdown
                  additionLabel="Add "
                  additionPosition="top"
                  closeOnBlur={true}
                  deburr={false}
                  fluid={true}
                  icon="dropdown"
                  minCharacters={1}
                  noResultsMessage="No results found."
                  onChange={[Function]}
                  openOnFocus={true}
                  options={
                    Array [
                      Object {
                        "key": "urgent",
                        "text": "urgent",
                        "value": "urgent",
                      },
                      Object {
                        "key": "normal",
                        "text": "normal",
                        "value": "normal",
                      },
                      Object {
                        "key": "nonurgent",
                        "text": "Not urgent",
                        "value": "nonurgent",
                      },
                    ]
                  }
                  placeholder="select request type"
                  renderLabel={[Function]}
                  search={true}
                  searchInput="text"
                  selectOnBlur={true}
                  selectOnNavigation={true}
                  selection={true}
                  wrapSelection={true}
                />
              </FormField>,
              <FormField
                error={false}
              >
                <label
                  htmlFor="decription"
                >
                  Description
                </label>
                <textarea
                  cols={50}
                  id="description"
                  name="description"
                  onChange={[Function]}
                  placeholder="Describe your request"
                  required={true}
                  rows={4}
                  type="text"
                />
              </FormField>,
              <input
                type="submit"
                value="Submit"
              />,
              <Link
                replace={false}
                to="/profile"
              >
                <input
                  id="cancel"
                  value="Cancel"
                />
              </Link>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <label
                    htmlFor="title"
                  >
                    Title:
                    <input
                      id="title"
                      name="title"
                      onChange={[Function]}
                      placeholder="Enter your request title"
                      required={true}
                      type="text"
                      value=""
                    />
                  </label>,
                  undefined,
                ],
                "error": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Title:",
                      <input
                        id="title"
                        name="title"
                        onChange={[Function]}
                        placeholder="Enter your request title"
                        required={true}
                        type="text"
                        value=""
                      />,
                    ],
                    "htmlFor": "title",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Title:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "defaultValue": undefined,
                        "id": "title",
                        "name": "title",
                        "onChange": [Function],
                        "placeholder": "Enter your request title",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                undefined,
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <label
                    htmlFor="requestType"
                  >
                    Request Type
                  </label>,
                  <Dropdown
                    additionLabel="Add "
                    additionPosition="top"
                    closeOnBlur={true}
                    deburr={false}
                    fluid={true}
                    icon="dropdown"
                    minCharacters={1}
                    noResultsMessage="No results found."
                    onChange={[Function]}
                    openOnFocus={true}
                    options={
                      Array [
                        Object {
                          "key": "urgent",
                          "text": "urgent",
                          "value": "urgent",
                        },
                        Object {
                          "key": "normal",
                          "text": "normal",
                          "value": "normal",
                        },
                        Object {
                          "key": "nonurgent",
                          "text": "Not urgent",
                          "value": "nonurgent",
                        },
                      ]
                    }
                    placeholder="select request type"
                    renderLabel={[Function]}
                    search={true}
                    searchInput="text"
                    selectOnBlur={true}
                    selectOnNavigation={true}
                    selection={true}
                    wrapSelection={true}
                  />,
                  undefined,
                ],
                "error": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Request Type",
                    "htmlFor": "requestType",
                  },
                  "ref": null,
                  "rendered": "Request Type",
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "additionLabel": "Add ",
                    "additionPosition": "top",
                    "closeOnBlur": true,
                    "deburr": false,
                    "fluid": true,
                    "icon": "dropdown",
                    "minCharacters": 1,
                    "noResultsMessage": "No results found.",
                    "onChange": [Function],
                    "openOnFocus": true,
                    "options": Array [
                      Object {
                        "key": "urgent",
                        "text": "urgent",
                        "value": "urgent",
                      },
                      Object {
                        "key": "normal",
                        "text": "normal",
                        "value": "normal",
                      },
                      Object {
                        "key": "nonurgent",
                        "text": "Not urgent",
                        "value": "nonurgent",
                      },
                    ],
                    "placeholder": "select request type",
                    "renderLabel": [Function],
                    "search": true,
                    "searchInput": "text",
                    "selectOnBlur": true,
                    "selectOnNavigation": true,
                    "selection": true,
                    "wrapSelection": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                undefined,
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <label
                    htmlFor="decription"
                  >
                    Description
                  </label>,
                  <textarea
                    cols={50}
                    id="description"
                    name="description"
                    onChange={[Function]}
                    placeholder="Describe your request"
                    required={true}
                    rows={4}
                    type="text"
                  />,
                  undefined,
                ],
                "error": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Description",
                    "htmlFor": "decription",
                  },
                  "ref": null,
                  "rendered": "Description",
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": null,
                    "cols": 50,
                    "id": "description",
                    "name": "description",
                    "onChange": [Function],
                    "placeholder": "Describe your request",
                    "required": true,
                    "rows": 4,
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "textarea",
                },
                undefined,
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <input
                  id="cancel"
                  value="Cancel"
                />,
                "replace": false,
                "to": "/profile",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "cancel",
                  "value": "Cancel",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "main",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
